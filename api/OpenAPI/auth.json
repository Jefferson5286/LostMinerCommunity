{
  "openapi": "3.1.0",
  "info": {
    "title": "Authentication API Docs",
    "version": "1.0.0",
    "description": "API for registering, logging in, authorizing and managing platform user passwords. Requires authentication via Bearer token for some routes."
  },
  "servers": [
    {
      "url": "http://localhost:8000"
    }
  ],
  "paths": {
    "/api/authorize/": {
      "post": {
        "summary": "Authorize user based on provided code",
        "description": "This endpoint processes an authorization request based on the code provided in the request body. It verifies the code, processes the registration or login operation, and returns an authentication token.",
        "operationId": "authorize_user",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "The confirmation code received during the registration or login process."
                  }
                },
                "required": ["code"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authorization. Returns an authentication token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT token for authentication."
                    }
                  }
                },
                "example": {
                  "token": "your-jwt-token"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Missing or invalid <code> field.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Field <code> is required."
                }
              }
            }
          },
          "422": {
            "description": "Incorrect type for <code>.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Incorrect type for <code>. Expected <string>, received <type>."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Code is invalid or expired.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Unauthorized!"
                }
              }
            }
          }
        }
      }
    },
    "/api/register/": {
      "post": {
        "summary": "Register a new user",
        "description": "This endpoint registers a new user by validating the presence and type of fields in the request body. It checks if the email is already in use and sends a confirmation code to the user's email if valid.",
        "operationId": "register_user",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The username for the new user."
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address for the new user."
                  }
                },
                "required": ["username", "email"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registration initiated. Confirmation code sent to email.",
            "content": {
              "application/json": {
                "example": {
                  "message": "User registered successfully. A confirmation code has been sent to the provided email."
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Missing <username> or <email>.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Both <username> and <email> are required."
                }
              }
            }
          },
          "422": {
            "description": "Incorrect data type for fields.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Some of the fields have the wrong type. Only <string> accepted!"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Email already exists.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Email already exists."
                }
              }
            }
          }
        }
      }
    },
    "/api/login/": {
      "post": {
        "summary": "User login",
        "description": "This endpoint handles user login by verifying the provided email and password. If successful, it returns an authentication token. If no password is provided, a confirmation code is sent to the user's email for login.",
        "operationId": "login_user",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email address of the user."
                  },
                  "password": {
                    "type": "string",
                    "description": "The password for the user."
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful. Returns an authentication token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT token for authentication."
                    }
                  }
                },
                "example": {
                  "token": "your-jwt-token"
                }
              }
            }
          },
          "201": {
            "description": "Confirmation code sent to email.",
            "content": {
              "application/json": {
                "example": {
                  "message": "A confirmation code has been sent to your email."
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Missing <email> field.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Missing <email>."
                }
              }
            }
          },
          "422": {
            "description": "Incorrect type for <email> or <password>.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Incorrect email format."
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "example": {
                  "message": "User not found."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Incorrect password.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Incorrect password."
                }
              }
            }
          }
        }
      }
    },
    "/api/set_password/": {
      "put": {
        "summary": "Set a new password",
        "description": "This endpoint initiates the password reset process by sending a confirmation code to the user's email and storing the data temporarily in the cache.",
        "operationId": "set_password",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "The new password for the user."
                  }
                },
                "required": ["password"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Password reset process initiated. Confirmation code sent to email.",
            "content": {
              "application/json": {
                "example": {
                  "message": "A confirmation code has been sent to your email."
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Missing <password> field.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Field <password> is required."
                }
              }
            }
          },
          "422": {
            "description": "Invalid type for <password> field.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Invalid type for <password>. Expected a non-empty string."
                }
              }
            }
          }
        }
      }
    },
    "/api/refresh_token/": {
      "put": {
        "summary": "Refresh authentication token",
        "description": "This endpoint allows the user to refresh their authentication token by creating a new connection and deleting the old one.",
        "operationId": "refresh_token",
        "tags": ["Authentication"],
        "responses": {
          "200": {
            "description": "Token successfully refreshed.",
            "content": {
              "application/json": {
                "example": {
                  "token": "new-jwt-token"
                }
              }
            }
          }
        }
      }
    }
  }
}
